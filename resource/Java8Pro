
Given a list of integers, find out all the even numbers that exist in the list using Stream functions?
import java.util.*;
import java.util.stream.*;

public class EvenNumber{
    public static void main(String args[]) {
      List<Integer> list = Arrays.asList(10,15,8,49,25,98,32);
            list.stream()
                .filter(n -> n%2 == 0)
                .forEach(System.out::println);

    /* or can also try below method */

/* When numbers are given as Array int[] arr = {10,15,8,49,25,98,32}; */

    Map<Boolean, List<Integer>> list = Arrays.stream(arr).boxed()
    .collect(Collectors.partitioningBy(num -> num % 2 == 0));
    System.out.println(list);
       }
   }


Output: 
10, 8, 98, 32
2. Given a list of integers, find out all the numbers starting with 1 using Stream functions?

import java.util.*;
import java.util.stream.*;

public class NumberStartingWithOne{
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,32);
            myList.stream()
                  .map(s -> s + "") // Convert integer to String
                  .filter(s -> s.startsWith("1"))
                  .forEach(System.out::println);

/* or can also try below method */

/* When numbers are given as Array int[] arr = {10,15,8,49,25,98,32}; */
      List<String> list = Arrays.stream(arr).boxed()
                                .map(s -> s + "")
                                .filter(s -> s.startsWith("1"))
                                .collect(Collectors.toList());

    System.out.println(list);
    }
}

Output:
10, 15
3. How to find duplicate elements in a given integers list in java using Stream functions?

import java.util.*;
import java.util.stream.*;

public class DuplicateElements {
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
          Set<Integer> set = new HashSet();
          myList.stream()
                .filter(n -> !set.add(n))
                .forEach(System.out::println);
  }
}

Output:
98, 15



// Or you can also try using distinct() keyword

public static void getDataWithoutDuplicates() {
     List<Integer> myList = Arrays.asList(1, 1, 85, 6, 2, 3, 65, 6, 45, 45, 5662, 2582, 2, 2, 266, 666, 656);
     myList.stream().distinct().forEach(noDuplicateData -> System.out.println(noDuplicateData));
 }

Output : 1 85 6 2 3 65 45 5662 2582 266 666 656



//Or you can also use below 

public static void getDataWithoutDuplicates() {
      List<Integer> myList = Arrays.asList(1, 1, 85, 6, 2, 3, 65, 6, 45, 45, 5662, 2582, 2, 2, 266, 666, 656);
      Set<Integer> set = new HashSet<>(myList);
        
      // Convert the set back to a list if needed
      List<Integer> uniqueData = set.stream().collect(Collectors.toList());
        
      // Print the unique elements
      uniqueData.forEach(System.out::println);
  }

Output : 1 65 2 3 6 266 45 656 85 2582 666 5662

/* or can also try below single line code */
/* When numbers are given as Array int[] arr = {10,15,8,49,25,98,98,32,15}; */

List<Integer> list = Arrays.stream(arr).boxed().distinct().collect(Collectors.toList());
4. Given the list of integers, find the first element of the list using Stream functions?

import java.util.*;
import java.util.stream.*;

public class FindFirstElement{
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
          myList.stream()
                .findFirst()
                .ifPresent(System.out::println);

      /* or can also try below single line code */
      /* When numbers are given as Array int[] arr = {10,15,8,49,25,98,98,32,15}; */
      Arrays.stream(arr).boxed().findFirst().ifPresent(System.out::print);
  }
}

Output:
10
5. Given a list of integers, find the total number of elements present in the list using Stream functions?

import java.util.*;
import java.util.stream.*;

public class FindTheTotalNumberOfElements{
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
          long count =  myList.stream()
                              .count();
          System.out.println(count);   

/* or can also try below line code */
/* When numbers are given as Array int[] arr = {10,15,8,49,25,98,98,32,15}; */
      Arrays.stream(arr).boxed().count();             
  }
}

Output:
9
6. Given a list of integers, find the maximum value element present in it using Stream functions?

import java.util.*;
import java.util.stream.*;

public class FindMaxElement{
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
          int max =  myList.stream()
                           .max(Integer::compare)
                           .get();
          System.out.println(max);   

/* or we can try using below way */
/* When numbers are given as Array int[] arr = {10,15,8,49,25,98,98,32,15}; */

        int maxdata = Arrays.stream(arr).boxed()
                            .max(Comparator.naturalOrder()).get(); 

        System.out.println(maxdata);              
  }
}

Output:
98
7. Given a String, find the first non-repeated character in it using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class FirstNonRepeated{
  public static void main(String args[]) {
    String input = "Java articles are Awesome";
    
    Character result = input.chars() // Stream of String       
            .mapToObj(s -> Character.toLowerCase(Character.valueOf((char) s))) // First convert to Character object and then to lowercase         
            .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting())) //Store the chars in map with count 
            .entrySet()
            .stream()
            .filter(entry -> entry.getValue() == 1L)
            .map(entry -> entry.getKey())
            .findFirst()
            .get();
    System.out.println(result); 

    /* or can also try using */  
    
  input.chars().mapToObj(c -> (char) c)
               .filter(ch -> input.indexOf(ch) == input.lastIndexOf(ch))
               .findFirst().orElse(null);                 
    }
}

Output:
j
8. Given a String, find the first repeated character in it using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class FirstRepeated{
  public static void main(String args[]) {
          String input = "Java Articles are Awesome";

          Character result = input.chars() // Stream of String       
                                  .mapToObj(s -> Character.toLowerCase(Character.valueOf((char) s))) // First convert to Character object and then to lowercase         
                                  .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting())) //Store the chars in map with count 
                                  .entrySet()
                                  .stream()
                                  .filter(entry -> entry.getValue() > 1L)
                                  .map(entry -> entry.getKey())
                                  .findFirst()
                                  .get();
          System.out.println(result);    

    /* or can also try */

        Set<Character> seenCharacters = new HashSet<>();

        return input.chars()
                    .mapToObj(c -> (char) c)
                    .filter(c -> !seenCharacters.add(c))
                    .findFirst()
                    .orElse(null);                
  }
}  


Output:
a
9. Given a list of integers, sort all the values present in it using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class SortValues{
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);

           myList.stream()
                 .sorted()
                 .forEach(System.out::println);

        /* Or can also try below way */
      /* When numbers are given as Array int[] arr = {10,15,8,49,25,98,98,32,15}; */

        Arrays.stream(arr).boxed().sorted().collect(Collectors.toList())
  }
}

Output:
 8
10
15
15
25
32
49
98
98
10. Given a list of integers, sort all the values present in it in descending order using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class SortDescending{
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);

           myList.stream()
                 .sorted(Collections.reverseOrder())
                 .forEach(System.out::println);
  }
}

Output:
98
98
49
32
25
15
15
10
8
11. Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

public boolean containsDuplicate(int[] nums) {
    List<Integer> list = Arrays.stream(nums)
                               .boxed()
                               .collect(Collectors.toList());
    Set<Integer> set = new HashSet<>(list);
     if(set.size() == list.size()) {
       return false;
   } 
      return true;

/* or can also try below way */ 
    Set<Integer> setData = new HashSet<>();
        return Arrays.stream(nums)
                     .anyMatch(num -> !setData.add(num));
  }

Input: nums = [1,2,3,1]
Output: true

Input: nums = [1,2,3,4]
Output: false
12. How will you get the current date and time using Java 8 Date and Time API?

class Java8 {
    public static void main(String[] args) {
        System.out.println("Current Local Date: " + java.time.LocalDate.now());
        //Used LocalDate API to get the date
        System.out.println("Current Local Time: " + java.time.LocalTime.now());
        //Used LocalTime API to get the time
        System.out.println("Current Local Date and Time: " + java.time.LocalDateTime.now());
        //Used LocalDateTime API to get both date and time
    }
}
13. Write a Java 8 program to concatenate two Streams?

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
 
public class Java8 {
    public static void main(String[] args) {
 
        List<String> list1 = Arrays.asList("Java", "8");
        List<String> list2 = Arrays.asList("explained", "through", "programs");
 
        Stream<String> concatStream = Stream.concat(list1.stream(), list2.stream());
         
        // Concatenated the list1 and list2 by converting them into Stream
 
        concatStream.forEach(str -> System.out.print(str + " "));
         
        // Printed the Concatenated Stream
         
    }
}
14. Java 8 program to perform cube on list elements and filter numbers greater than 50.

import java.util.*;

public class Main {
    public static void main(String[] args) {
       List<Integer> integerList = Arrays.asList(4,5,6,7,1,2,3);
       integerList.stream()
                  .map(i -> i*i*i)
                  .filter(i -> i>50)
                  .forEach(System.out::println);
    }
}  

Output:
64
125
216
343
15. Write a Java 8 program to sort an array and then convert the sorted array into Stream?

import java.util.Arrays;
 
public class Java8 {
 
    public static void main(String[] args) {
        int arr[] = { 99, 55, 203, 99, 4, 91 };
        Arrays.parallelSort(arr);
        // Sorted the Array using parallelSort()
         
        Arrays.stream(arr).forEach(n > System.out.print(n + " "));
        /* Converted it into Stream and then
           printed using forEach */
    }
}
16. How to use map to convert object into Uppercase in Java 8?

public class Java8 {
 
    public static void main(String[] args) {
        List<String> nameLst = names.stream()
                                    .map(String::toUpperCase)
                                    .collect(Collectors.toList());
        System.out.println(nameLst);
    }
}

output:
AA, BB, CC, DD
17. How to convert a List of objects into a Map by considering duplicated keys and store them in sorted order?

public class TestNotes {

    public static void main(String[] args) {

    List<Notes> noteLst = new ArrayList<>();
    noteLst.add(new Notes(1, "note1", 11));
    noteLst.add(new Notes(2, "note2", 22));
    noteLst.add(new Notes(3, "note3", 33));
    noteLst.add(new Notes(4, "note4", 44));
    noteLst.add(new Notes(5, "note5", 55));

    noteLst.add(new Notes(6, "note4", 66));


    Map<String, Long> notesRecords = noteLst.stream()
                                            .sorted(Comparator
                                            .comparingLong(Notes::getTagId)
                                            .reversed()) // sorting is based on TagId 55,44,33,22,11
                                            .collect(Collectors.toMap
                                            (Notes::getTagName, Notes::getTagId,
                                            (oldValue, newValue) -> oldValue,LinkedHashMap::new));
// consider old value 44 for dupilcate key
// it keeps order
        System.out.println("Notes : " + notesRecords);
    }
}
18. How to count each element/word from the String ArrayList in Java8?

public class TestNotes {

    public static void main(String[] args) {
        List<String> names = Arrays.asList("AA", "BB", "AA", "CC");
        Map<String,Long> namesCount = names
                                .stream()
                                .collect(
                                 Collectors.groupingBy(
                                  Function.identity(), Collectors.counting()));
        System.out.println(namesCount);
  }
}

Output:
{CC=1, BB=1, AA=2}
19. How to find only duplicate elements with its count from the String ArrayList in Java8?

public class TestNotes {

    public static void main(String[] args) 
      List<String> names = Arrays.asList("AA", "BB", "AA", "CC");
      Map<String,Long> namesCount = names
                                   .stream()
                       .filter(x->Collections.frequency(names, x)>1)
                       .collect(Collectors.groupingBy
                       (Function.identity(), Collectors.counting()));
      System.out.println(namesCount);

/*or you can also try using  */

Map<String, Long> namesCount = names.stream()
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
                .entrySet()
                .stream()
                .filter(entry -> entry.getValue() > 1)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
  }
}

Output:
{AA=2}
20. How to check if list is empty in Java 8 using Optional, if not null iterate through the list and print the object?

Optional.ofNullable(noteLst)
            .orElseGet(Collections::emptyList) // creates empty immutable list: [] in case noteLst is null
            .stream().filter(Objects::nonNull) //loop throgh each object and consider non null objects
            .map(note -> Notes::getTagName) // method reference, consider only tag name
            .forEach(System.out::println); // it will print tag names
21. Write a Program to find the Maximum element in an array?

public static int findMaxElement(int[] arr) {
  return Arrays.stream(arr).max().getAsInt();
}

Input: 12,19,20,88,00,9
output: 88

22. Write a program to print the count of each character in a String?

public static void findCountOfChars(String s) {
Map<String, Long> map = Arrays.stream(s.split(""))
                              .map(String::toLowerCase)
                              .collect(Collectors
                              .groupingBy(str -> str, 
                                LinkedHashMap::new, Collectors.counting()));

// or you can also try using Function.identify() instead of LinkedHashMap

Map<String, Long> mapObject = Arrays.stream(s.split(""))
                                    .map(String::toLowerCase)
   .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));


}

Input: String s = "string data to count each character";
Output: {s=1, t=5, r=3, i=1, n=2, g=1,  =5, d=1, a=5, o=2, c=4, u=1, e=2, h=2}
Here, we come to the end of Java 8 coding interview questions and answers. These questions are very common in all the Java 8 interviews, so save and practice the programs accordingly.



















-----------------------------------------------------------------------------------------------------------------------------





1- Write a Java Program to find whether a number is prime or not.

import java.util.stream.IntStream;

//Prime numbers are natural numbers that are divisible by only 1 and the number itself
public class FindPrimeNumber {

    public static void main(String[] args) {
        isPrime(9);
        isPrime(17);
        isPrime(1);
        isPrime(0);
        isPrime(-5);
    }
    
    private static void isPrime(int num) {
        if (num <= 1) {
            System.out.println(num + " is not a prime number");
            return;
        }
    
        boolean isPrime = IntStream.rangeClosed(2, (int) Math.sqrt(num))
                                   .noneMatch(x -> num % x == 0);
    
        if (isPrime) {
            System.out.println(num + " is a prime number");
        } else {
            System.out.println(num + " is not a prime number");
        }
    }
2-Write a Java Program to check Armstrong numbers.

//Armstrong number is the number in any given number base, which forms the total of the same number,
//when each of its digits is raised to the power of the number of digits in the number.
public class FindArmstrongNumber {

 public static void main(String[] args) {
  System.out.println("Is Armstrong Number : " + isArmstrongNumberByJava8(371));
 }
 private static boolean isArmstrongNumberByJava8(int num) {
  if (num < 0) {
     return false;
    }
  int numDigits = String.valueOf(num).length();

  int sum = String.valueOf(num).chars().map(Character::getNumericValue)
    .map(digit -> (int) Math.pow(digit, numDigits)).sum();

  return sum==num;
 }
}
3- Write a program to print duplicate numbers.

public class FindDuplicateNumber {

 public static void main(String[] args) {
  int a[] = { 1, 4, 5, 2, 12, 34, 2, 11 };
  System.out.println("Duplicate number by java 1.8 : " + findDuplicateNumberByJava1_8(a));
 }
 private static int findDuplicateNumberByJava1_8(int[] a) {
  Map<Integer, Long> map = Arrays.stream(a).boxed()
    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

  int duplicate = map.keySet().stream().filter(x -> map.get(x) > 1).findFirst().orElse(0);

  // If there have more then one duplicate then used this
 map.keySet().stream().filter(x -> map.get(x) > 1).forEach(System.out::println);
  return duplicate;
 }
}
4-Write a program to find whether a string or number is palindrome or not.

//A Palindromic number is a number (such as 16461) that 
// remains the same when its digits are reversed.
public class FindPalindromeNumber {
 public static void main(String[] args) {
  System.out.println(" Is Palindrome No : " + isPalindromeNumberByJava8(16461));
 }

 private static boolean isPalindromeNumberByJava8(int n) {
  String value = String.valueOf(n);
  int len = value.length();
  boolean isPalindromeNumber = IntStream.range(0, len / 2)
    .anyMatch(index -> value.charAt(index) == value.charAt(len - index - 1));
  return isPalindromeNumber;
 }
}
5- Write a program to print duplicate strings.

public class FindDuplicateInString {

 public static void main(String[] args) {
  String input = "JavaAPI";

  List<Character> duplicateList= input.chars().mapToObj(x -> Character.toUpperCase((char) x))
    .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()))
    .entrySet().stream().filter(x -> x.getValue() > 1L).map(Entry::getKey).collect(Collectors.toList());

  System.out.println(duplicateListj);
 }
}
6- Write a program to print the Fibonacci Series.

//The Fibonacci series is the sequence of numbers, 
// where every number is the sum of the preceding two numbers.
public class FindFibonacciSeries {

 public static void main(String[] args) {
  findFibonacciSeriesByJava8();
 }

 private static void findFibonacciSeriesByJava8() {
  Stream.iterate(new int[] { 0, 1 }, f -> new int[] { f[1], f[0] + f[1] }).limit(10).map(f -> f[0])
    .forEach(System.out::println);
 }
}
7- Write a program to find min and max numbers in the array.

public class FindMinAndMaxInArray {

 public static void main(String[] args) {

  int a[] = { 2, 3, 1, 22, 11, 33, 5 };

// Find the max number
  int max = Arrays.stream(a).boxed().max(Integer::compareTo).get();

  System.out.println("Max Value by java 8 : "+max);
  findMaxValue(a);

  // Find the min number
  int min = Arrays.stream(a).boxed().max(Comparator.reverseOrder()).get();

  System.out.println("Min Value by java 8 : "+min);
  findMinValue(a);

 }
}
8-Write a program to find Min And Max In an Array Without using the max function

public class FindMinAndMaxInArrayWithoutMaxFunction {
 public static void main(String[] args) {
  int arr[] = { 2, 3, 1, 22, 11, 33, 5 };
  int max = Arrays.stream(arr).boxed().reduce(Integer.MIN_VALUE, (a, b) -> Integer.max(a, b)).intValue();
  int min = Arrays.stream(arr).boxed().reduce(Integer.MAX_VALUE, (a, b) -> Integer.min(a, b)).intValue();
  System.out.println("Max : " + max + "  Min : " + min);

  System.out.println();
  // Using the method reference;
  int max1 = Arrays.stream(arr).boxed().reduce(Integer::max).get();
  int min1 = Arrays.stream(arr).boxed().reduce(Integer::min).get();
  System.out.println("Max : " + max1 + "  Min : " + min1);
 }
}
9-Write a program to find the second-highest number in an array.

public class FindSecondHighehestNumber {

 public static void main(String[] args) {
  int a[] = { 3, 6, 32, 1, 8, 5, 31, 22 };

  int secundMax = Arrays.stream(a).boxed().sorted(Comparator.reverseOrder()).skip(1).findAny().get();
  System.out.println(secundMax);
 
 }
}
10- Write a program to Find the Second Lowest Number.

public class FindSecondLowestNumber {

 public static void main(String[] args) {
  int a[] = { 3, 6, 32, 1, 8, 5, 31, 22, 2 };
  int secundMin = Arrays.stream(a).boxed().sorted().skip(1).findAny().get();
  System.out.println(secundMin);
 }
}
11- Write a program to print the First Not Repeated Char in string.

public class FirstNotRepetedChar {

 public static void main(String[] args) {
  String input = "Java Stream API is very good concept";

  char firstNotRepetedChar = input.chars().mapToObj(x -> Character.toUpperCase((char) x))//converting the object format
    .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()))// find duplicate freq in linkedHashMap
    .entrySet().stream().filter(x -> x.getValue() == 1L).map(x -> x.getKey()).findFirst().get();//filtering the freq which is not first time

  System.out.println("First non repeated char  : " + firstNotRepetedChar);

 }
}
12- Write a program to a Flattering list of objects.

public class FlatteringList {

 public static void main(String[] args) {
  List<Integer> oddList = Arrays.asList(1, 3, 5, 7, 9, 11);
  List<Integer> evenList = Arrays.asList(2, 4, 6, 8, 10);
  List<List<Integer>> listOfList = Arrays.asList(oddList, evenList);
  System.out.println(listOfList);
  List<Integer> flatList = listOfList.stream().flatMap(list -> list.stream()).collect(Collectors.toList());

  System.out.println(flatList);
 }
}
13- Write a program to find the majority element in an array.

///Find the majority element in the array. A majority element in an array A[] of size n is 
// an element that appears more than n/2 times.
public class MajorityElementInStream {

 public static void main(String[] args) {
  int majorityArray[] = { 5, 3, 2, 1, 2, 4, 3, 2, 2, 6, 2, 3, 2, 2, 2 };
  int notMajorityArray[] = { 3, 6, 32, 1, 8, 5, 31, 22 };
  printMajorityElementByJava8(majorityArray);
  printMajorityElementByJava8(notMajorityArray);
 }

 private static void printMajorityElementByJava8(int a[]) {
  int majorityElement = Arrays.stream(a).boxed()
    .collect(Collectors.groupingBy(Function.identity(), HashMap::new, Collectors.counting())).entrySet()
    .stream().filter(k -> k.getValue() >= a.length / 2).map(Entry::getKey).findFirst().orElse(0);
  System.out.println(majorityElement);
 }
}
14- Write a program to Print Even and Odd Numbers.

public class PrintEvenOddNumber {

 public static void main(String[] args) {

  printEvenNumberByJava8();
  printOddNumberByJava8();

 }

 private static void printEvenNumberByJava8() {

  IntStream.rangeClosed(0, 10).filter(x -> x % 2 == 0).forEach(System.out::println);

 }

 private static void printOddNumberByJava8() {

  IntStream.rangeClosed(0, 10).filter(x -> x % 2 != 0).forEach(System.out::println);

 }
}
15- Write a program to sort the 2 arrays in ascending order.

public class Sort2ArrayInAssendingOrder {

 public static void main(String[] args) {
  int i[] = { 4, 5, 13, 22 };
  int j[] = { 0, 9, 3, 7, 12, 11 };
  List<Integer> sortedList= Stream.concat(Arrays.stream(i).boxed(), Arrays.stream(j).boxed()).sorted()
    .collect(Collectors.toList());
  System.out.println(sortedList);
 }
}
16-Write a program to sort the array.

public class SortArrayInReverseOrder {

 public static void main(String[] args) {
  int a[] = { 3, 6, 32, 1, 8, 5, 31, 22 };

  List<Integer> newArra = Arrays.stream(a).boxed().sorted().collect(Collectors.toList());

  System.out.println(newArra);

  Arrays.sort(a);
  System.out.println(Arrays.toString(a));
 }
}
17-Write a program to sum an array.

public class SumArray {

 public static void main(String[] args) {
  int a[] = { 3, 6, 32, 1, 8, 5, 31, 22 };
  int sumValue = Arrays.stream(a).boxed().collect(Collectors.summingInt(Integer::intValue));
  System.out.println(sumValue);
 }
}
18-Write a program to sum an array without using the sum method.

public class SumArray {

 public static void main(String[] args) {
  int a[] = { 3, 6, 32, 1, 8, 5, 31, 22 };
  int sum = Arrays.stream(a).boxed().reduce(0, (x, y) -> x + y).intValue();
  System.out.println(sum);
 }
}
19- Write a program to append char in char ex-input- {A, B, C} output->[A_X, B_Y, C_Z].

public class AppendCharInChar {

 public static void main(String[] args) {
  Stream<Character> charStream = Stream.of('A', 'B', 'C');
  charStream.forEach(ch -> {
   char newChar = (char) (ch + 23);
   System.out.println(ch + "_" + newChar);
  });
 }
}
20-Write a program to find the only duplicate count list in the List.

public class PrintOnlyDuplicateCountList {
 public static void main(String[] args) {
  List<String> names = Arrays.asList("Java", "Spring", "JPA", "Java", "Cloud", "JPA");
  Map<String, Long> namesCount = names.stream().filter(x -> Collections.frequency(names, x) > 1)
    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
  System.out.println(namesCount);
 }
}